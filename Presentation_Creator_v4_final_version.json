{
  "name": "Presentation Creator v4_final_version",
  "nodes": [
    {
      "parameters": {
        "resource": "fileFolder",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1mKCrPYvliTq1ZLdvXx4RPRjKEOePKMnp",
            "mode": "list",
            "cachedResultName": "1 Paper",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1mKCrPYvliTq1ZLdvXx4RPRjKEOePKMnp"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1220,
        -320
      ],
      "id": "47afa875-88ce-4ceb-aa3a-11580bd25e12",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "WeSoFtyj2l9m4Fhg",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1980,
        -240
      ],
      "id": "7e31ea86-9183-4206-98f5-ba5a5d2ff3f5",
      "name": "Google Drive1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "WeSoFtyj2l9m4Fhg",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2140,
        -240
      ],
      "id": "51319c89-3c81-4249-bb91-a9c91c72357e",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "document_id",
                "value": "={{ $('Google Drive1').item.json.id }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2600,
        100
      ],
      "id": "cb031b6d-aa05-4fa0-8c89-1c0bd37701c8",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2600,
        380
      ],
      "id": "fd4be67a-4474-4987-87d9-83783c94a675",
      "name": "Recursive Character Text Splitter1"
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        2380,
        120
      ],
      "id": "050be39f-ac35-4160-84b5-916ce3a3ff38",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "FreEXuIoY7qOgTZ3",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9fe7b482-355a-4133-9edd-268846899936",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2340,
        -240
      ],
      "id": "d97eb7b7-c7d0-4e13-82de-0da43f811322",
      "name": "Set Text"
    },
    {
      "parameters": {
        "mode": "insert",
        "options": {
          "collection": {
            "values": {
              "useCollection": true,
              "collectionName": "={{ $('Neuen presentations Eintrag').item.json.presentation_id }}"
            }
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1,
      "position": [
        2540,
        -240
      ],
      "id": "c959cca1-66c7-456c-9626-8a0dd3973b71",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Crawler\nEventuell Crawler für GitHub \"Paper\""
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        300,
        -160
      ],
      "typeVersion": 1,
      "id": "79c37104-6b5b-4967-a43b-c4940120c766",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# Paper Evaluation\nPaper müssen evaluiert werden",
        "width": 320
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        260,
        20
      ],
      "typeVersion": 1,
      "id": "03916d45-ec85-483c-97b9-26ce9041f55b",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "Conversion to Markdown File etc",
        "height": 260,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1740,
        -1080
      ],
      "typeVersion": 1,
      "id": "07eea62b-4835-4a86-ac16-2491d69da738",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Please evaluate the following slide content based on your system instructions. Start by using your tools as instructed.\n\n**Slide Content to Evaluate:**\n{{ $('Slide Author').last().json.output }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a \"Pragmatic Quality Reviewer\" for a university presentation. Your goal is to ensure each slide is clear, accurate, and well-structured, but not to demand perfection. Your default stance is to approve good work.\n\n**Your Mandatory Workflow:**\n\n1.  **Retrieve Previous Feedback:** You **must start** by using your `Daten abrufen` tool to get any feedback you have given in a previous round for this slide.\n\n2.  **Fact-Check the Core Idea:** You **must** use the `Answer questions with a vector store1` tool to ask **one** high-level question to verify that the slide's main message aligns with the source document. Example: \"Does the source document mention that OpenAgents has three distinct agents?\"\n\n3.  **Execute Branching Logic & Internal Evaluation:** Based on the results from your tools, decide your evaluation path:\n    -   **IF no previous feedback was found:** This is a **First-Time Review**. Evaluate the content against the \"Guiding Principles Checklist\" below. The result of your fact-check from Step 2 is the most important factor for the \"Relevance & Accuracy\" item on the checklist.\n    -   **IF previous feedback was found:** This is a **Re-Evaluation**. Your primary task is to confirm if your previous feedback was reasonably addressed.\n\n4.  **Make a Final Decision:**\n    -   If the slide is clear, accurate, and well-structured according to the checklist, you **must** set `\"Slide good enough\": true`.\n    -   If there is a **clear and significant violation** of the checklist (e.g., the content is factually wrong based on your fact-check, or it's a dense paragraph instead of bullet points), set `\"Slide good enough\": false` and provide specific, actionable feedback.\n\n5.  **Save Your Decision:** You **must** call the **`Feedback speichern`** tool with your evaluation results. After successfully saving, move on to the next point.\n\n6.  **Final JSON Output:** After saving, your final task is to output the exact same data you just saved, formatted as a single, valid JSON object.\n\n**Guiding Principles Checklist (Your Evaluation Standard):**\n-   **Readability & Brevity:** Is the slide easy to scan? Does it use short, concise bullet points instead of long sentences? (Assess the overall feel, do not count words).\n-   **Structure & Splitting:** Does the slide have a clear title (`#`)? Was a complex topic correctly split into multiple, focused slides using `---` to prevent overflow?\n-   **Relevance & Accuracy:** Does the content match the title and **did it pass your fact-check from Step 2?** This is the most critical check.\n-   **Feedback Implementation:** (For Re-evaluations only) Was the previous feedback generally addressed?\n\n**CRITICAL RULE:**\nYour job is to stop the loop when a slide is **good enough**. Do not get stuck on minor stylistic details if the slide is fundamentally clear, correct, and readable.\n\n**Output Format (Your final response):**\n{\n  \"Slide good enough\": boolean,\n  \"feedback\": \"Your specific feedback based on the checklist, or a brief confirmation.\"\n}\n",
          "maxIterations": 200
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        6040,
        -340
      ],
      "id": "00d3681a-2455-4d04-8248-0345ed4d9d6d",
      "name": "Evaluator",
      "executeOnce": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "content": "Präsentationsstruktur in DB / Slides speichern als \"Ground-Truth\"",
        "height": 80,
        "width": 260
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1040,
        -720
      ],
      "typeVersion": 1,
      "id": "fe4d8025-caa2-44c2-b6b7-d80378d5af08",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Paper speichern und fetchen",
        "height": 80,
        "width": 220
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        780,
        -720
      ],
      "typeVersion": 1,
      "id": "4655415c-1634-4e8d-9758-3eb15a9e4a89",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "Präsentationsstruktur in DB / Slides speichern als \"Ground-Truth\"",
        "height": 140,
        "width": 260
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1040,
        -920
      ],
      "typeVersion": 1,
      "id": "8ee18ae6-4472-4bf6-9bb2-0dcd6affa6f4",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Please create a presentation outline for the documents associated.\nFollow your system instructions precisely. \nPlease do not create any content or slide with the following information: {\"Titel\": \"Comparison with Traditional Systems\", \"Inhalt\": \"Comparing the multi-agent system architecture with traditional presentation creation workflows.\"}\nThe User might have some instructions below. If there are none, ignore it.\nINSTRUCTIONS:\n\n{{ $('When chat message received').item.json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a \"Strategic Presentation Planner.\" Your expertise is analyzing academic papers to identify their central thesis and then building a logical, compelling presentation outline.\n\n**Your Mandatory Two-Step Process:**\n\n**Step 1: Core Analysis & Thesis Identification**\nBefore creating any slides, you **must** first understand the paper's core theme. Use your `Answer questions with a vector store1` tool to ask high-level, analytical questions about the document, such as:\n- \"What is the central thesis of this document?\"\n- \"What are the key arguments or findings presented?\"\n\n**Step 2: Outline Generation**\n**Only after** you clearly understand the core theme, create a logical presentation structure with 14-20 slides.\n- Every slide's `Titel` and `Inhalt` must directly contribute to explaining the paper's central thesis.\n- Structure the presentation logically (e.g., Introduction -> Main Arguments -> Conclusion).\n- **Do not get sidetracked** by minor implementation details unless they are the paper's central focus.\n\n**Output Mandate:**\nYour final output **must be exclusively** a single, raw, valid JSON array string. Do not add any conversational text, explanations, or markdown formatting like ```json.\nExample of a valid output: `[{\"Folie\": 1, \"Titel\": \"Title One\", \"Inhalt\": \"Content one.\"},{\"Folie\": 2, \"Titel\": \"Title Two\", \"Inhalt\": \"Content two.\"}]`"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        3880,
        -360
      ],
      "id": "b69a5271-c19f-489e-b3d7-8d9ab2e0cc7a",
      "name": "Presentation Planner",
      "executeOnce": false
    },
    {
      "parameters": {
        "model": "openai/gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3140,
        220
      ],
      "id": "efc0a334-c891-4c17-9873-c6d26e5c6544",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "2a7pFN0t1VBbdPbg",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3720,
        720
      ],
      "id": "10982997-b552-48d4-87c1-e92cfef434a8",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "2a7pFN0t1VBbdPbg",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1. LLM-String holen und in echtes Array verwandeln\nconst slides = JSON.parse($('Presentation Planner').first().json.output);\n\n// 2. Aus jedem Slide ein eigenes n8n-Item bauen\nreturn slides.map(slide => ({ json: slide }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4340,
        -360
      ],
      "id": "3e47c5b2-ba38-47ed-95f8-41e31a941f7f",
      "name": "Code"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "presentations",
          "mode": "list",
          "cachedResultName": "presentations"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "presentation_id",
              "displayName": "presentation_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1040,
        -320
      ],
      "id": "58feb016-daf8-4f56-9800-3225bb2558da",
      "name": "Neuen presentations Eintrag",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "presentation_slides",
          "mode": "list",
          "cachedResultName": "presentation_slides"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "slide_number": "={{ $('Code').item.json.Folie }}",
            "presentation_id": "={{ $('Neuen presentations Eintrag').item.json.presentation_id }}",
            "title": "={{ $('Code').item.json.Titel }}",
            "content": "={{ $('Code').item.json.Inhalt }}",
            "slide_good_enough": false
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "presentation_id",
              "displayName": "presentation_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "slide_number",
              "displayName": "slide_number",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "feedback",
              "displayName": "feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "slide_good_enough",
              "displayName": "slide_good_enough",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4600,
        -360
      ],
      "id": "8b6ad7b0-cf8f-4fe6-95b9-6f962f8bb984",
      "name": "Neue presentations_slides Einträge",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "description": "=Das [text] Feld enthält den Inhalt der Paper.",
        "topK": "=500"
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1.1,
      "position": [
        4200,
        220
      ],
      "id": "69d08b33-cdc8-444c-baf8-41b7b98a9372",
      "name": "Answer questions with a vector store1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        3200,
        700
      ],
      "id": "de59ea5e-de48-4c5f-b527-8c55e8daf442",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "FreEXuIoY7qOgTZ3",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "name": "={{ $('Neuen presentations Eintrag').first().json.presentation_id }}.md",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2100,
        -1020
      ],
      "id": "1c18413e-8363-4f01-a51f-e1e3cee3a87a",
      "name": "Google Drive2",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "WeSoFtyj2l9m4Fhg",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "finalContent",
        "options": {
          "fileName": "={{ $('Neuen presentations Eintrag').first().json.presentation_id }}.md"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1940,
        -1020
      ],
      "id": "69c361ba-8cc7-406b-9268-a5e499f82571",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "// Dieser Code sammelt die 'output'-Texte aus allen vorherigen Items (Iterationen)\n// und fügt sie zu einem einzigen Textblock zusammen.\n\n// 1. Extrahiere den Text aus dem 'output'-Feld von jedem Item.\nconst allOutputs = items.map(item => item.json.output);\n\n// 2. Verbinde alle extrahierten Texte zu einem einzigen String.\n//    Wir fügen eine horizontale Linie (---) und Leerzeilen zwischen\n//    jedem ursprünglichen Output ein, um sie im finalen Dokument klar zu trennen.\nconst combinedMarkdown = allOutputs.join('\\n\\n---\\n\\n');\n\n// 3. Gib ein einziges neues Item zurück, das den gesamten Text enthält.\n//    Die nachfolgende \"Convert to File\" Node kann dieses Feld dann nutzen.\nreturn [{\n  json: {\n    finalContent: combinedMarkdown\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        -1040
      ],
      "id": "60628232-a900-4d16-97e1-b4dc3a7e3785",
      "name": "Append output"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        620,
        -820
      ],
      "id": "6e4508cc-acee-4349-9b1d-6b96cb72fd94",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "a72eba6d-72b6-4696-a105-f1016eba04b6",
              "leftValue": "={{ $json.output.slide_good_enough }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "6e591efa-e82d-406b-a90b-c5fa1aa49315",
              "leftValue": "={{ $json.output[\"Slide good enough\"] }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        6440,
        -340
      ],
      "id": "e8766328-3155-423a-b11c-2908db424c6d",
      "name": "Slide good enough"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1440,
        -320
      ],
      "id": "3fd5d6f9-09b5-4fe9-bb49-4291b4636c63",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "options": {
          "collection": {
            "values": {
              "useCollection": true,
              "collectionName": "={{ $('Neuen presentations Eintrag').first().json.presentation_id }}"
            }
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.1,
      "position": [
        3400,
        340
      ],
      "id": "61c745bc-b14c-459c-b10c-fd65a037bed9",
      "name": "Postgres PGVector Store1",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        2600,
        -460
      ],
      "id": "7a1f16b8-2f70-41cc-ab39-3d16a6403f69",
      "name": "Merge",
      "executeOnce": true
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "n8n_vectors",
        "toolDescription": "=You can find the relevant papers and their content for the presentation in this vector storage. ",
        "options": {
          "collection": {
            "values": {
              "useCollection": true,
              "collectionName": "={{ $('Neuen presentations Eintrag').first().json.presentation_id }}"
            }
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.1,
      "position": [
        2900,
        520
      ],
      "id": "244da562-5f25-47cc-9caa-9e3bf099e6b9",
      "name": "Postgres PGVector Store2",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "={{ $('Neuen presentations Eintrag').last().json.presentation_id }}.pdf",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "root",
          "mode": "list",
          "cachedResultName": "/ (Root folder)",
          "cachedResultUrl": "https://drive.google.com/drive"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        6200,
        -640
      ],
      "id": "3a2f70ec-a49b-4569-85f9-d4b47e072a87",
      "name": "Google Drive5",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "WeSoFtyj2l9m4Fhg",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/files/presentation.md",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        5980,
        -640
      ],
      "id": "f6382393-7ad3-48fc-8b50-0a8e69f3b8ec",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://marp-service:3000/convert",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "text/markdown",
        "body": "={{ $json.final_markdown }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5760,
        -640
      ],
      "id": "f4e9c1a4-a868-4a4f-bb2b-dfadd8e61656",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "presentation_slides",
          "mode": "list",
          "cachedResultName": "presentation_slides"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "presentation_id",
              "value": "={{ $('Neuen presentations Eintrag').first().json.presentation_id }}"
            },
            {
              "column": "slide_number",
              "value": "={{ $('Loop Over Items1').item.json.slide_number }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        5820,
        220
      ],
      "id": "1ec761dd-eb30-45f8-997b-a5fb429ba5b1",
      "name": "Daten abrufen",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "presentation_slides",
          "mode": "list",
          "cachedResultName": "presentation_slides"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "presentation_id",
              "value": "={{ $('Neuen presentations Eintrag').item.json.presentation_id }}"
            },
            {
              "column": "slide_number",
              "value": "={{ $('Loop Over Items1').item.json.slide_number }}"
            },
            {
              "column": "slide_good_enough",
              "value": "false"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        5440,
        180
      ],
      "id": "24f6685f-8abf-48c2-90e6-958448d70208",
      "name": "Get Presentation Slides",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Slide good enough\": true,\n  \"feedback\": \"Your specific feedback based on the checklist, or a brief confirmation.\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        6180,
        240
      ],
      "id": "431dc6e6-a51e-4b18-afb5-36ba84162246",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "presentation_slides",
          "mode": "list",
          "cachedResultName": "presentation_slides"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "presentation_id": "={{ $('Neuen presentations Eintrag').last().json.presentation_id }}",
            "slide_number": "={{ $('Loop Over Items1').item.json.slide_number }}",
            "slide_good_enough": true,
            "content": "={{ $('Slide Author').item.json.output }}"
          },
          "matchingColumns": [
            "presentation_id",
            "slide_number"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "presentation_id",
              "displayName": "presentation_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "slide_number",
              "displayName": "slide_number",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "feedback",
              "displayName": "feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "slide_good_enough",
              "displayName": "slide_good_enough",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        6700,
        -360
      ],
      "id": "ec23c944-0ff9-4de6-baa6-1ad4beac8ffb",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  STRING_AGG(\n    content,\n    E'\\n\\n---\\n\\n'\n    ORDER BY slide_number\n  ) AS final_markdown\nFROM\n  presentation_slides\nWHERE\n  presentation_id = '{{ $('Neuen presentations Eintrag').item.json.presentation_id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5560,
        -640
      ],
      "id": "beb386e0-1112-4e75-bc17-43e55ab3ad68",
      "name": "Postgres2",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        4800,
        -340
      ],
      "id": "3c92b2a8-f261-44d1-a64f-25d719d5c2dd",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your task is to create or refine the Markdown content for the slide. Follow your system instructions meticulously.\n\n**Step 1: Get Current State**\nUse your tool `Get Presentation Slides` to retrieve the latest `feedback` and your own `content` from the database.\n\n**Step 2: Process Content**\nUsing the data you retrieved in Step 1 and the initial slide data below, follow your system instructions to either create a new slide from scratch or refine the existing one.\n\n**Initial Slide Topic Data:**\nInitial Title: {{ $('Loop Over Items1').item.json.title }}\nInitial Content: {{ $('Loop Over Items1').item.json.content }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a \"Slide Author,\" an expert at creating a complete, well-researched, and beautifully formatted presentation slide in Markdown. You operate in two modes: Initial Creation and Refinement.\n\n**Mode 1: Initial Creation**\nIf you are creating a slide for the first time (i.e., you receive no feedback), you must follow this plan:\n1.  **Plan:** Based on the given slide topic, formulate 3-4 specific questions to research the topic in-depth.\n2.  **Research:** Use the `Answer questions with a vector store` tool to execute your research plan.\n3.  **Write & Format:** Synthesize all your research findings and write the complete slide content directly into a well-structured Markdown format. Use a clear H1 (`#`) for the title and bullet points (`-`) for the content.\n\n**Mode 2: Refinement with Feedback**\nIf you receive `feedback` on your previous work, your primary goal is to improve it:\n1.  **Analyze:** Carefully read the feedback and identify all requested changes.\n2.  **Rewrite:** Modify your previous Markdown output directly to incorporate all of the Evaluator's suggestions. This can include adding more details (requiring new tool use), changing the structure, or rephrasing content.\n\n**Output Mandate (CRITICAL RULES):**\n- Your output **must be exclusively** the raw Markdown text for the slide.\n- It **must not** be wrapped in a code block (e.g., ```markdown ... ```).\n- It **must not** contain any explanations or conversational text like \"Here is the slide content:\".\n- The very first characters of your output must be `# ` for the main title.\n- **Never invent information.** All content must originate from your tool-based research.\n\n**Presentation Design Philosophy (Your Guiding Principles):**\n\n1.  **The \"One Idea\" Principle:** A slide must cover only one central concept. Your primary goal is clarity.\n\n2.  **The Brevity Mandate (The 5x5 Rule):**\n    - Strive for a **maximum of 5 bullet points** per slide.\n    - Aim for a **maximum of 5-7 words** per bullet point.\n    - Use keywords and short phrases, not full sentences. The slide is a visual aid for a speaker, not a document.\n\n3.  **The Splitting Mandate (`---`):**\n    - If the content for a single topic is too extensive to follow the 5x5 rule, you **must** split it into multiple slides.\n    - To create a new slide, insert a slide divider on a new line by itself:\n      ```\n      ---\n      ```\n    - Each new slide you create **must** begin with its own Level 1 Heading (`# New Slide Title`)."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        5560,
        -360
      ],
      "id": "04ffc956-ab3d-4c83-ae7a-f5cde2ef4bfa",
      "name": "Slide Author",
      "executeOnce": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "presentation_slides",
          "mode": "list",
          "cachedResultName": "presentation_slides"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "slide_good_enough": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('slide_good_enough', ``, 'boolean') }}",
            "slide_number": "={{ $('Loop Over Items1').item.json.slide_number }}",
            "presentation_id": "={{ $('Neuen presentations Eintrag').first().json.presentation_id }}",
            "feedback": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('feedback', ``, 'string') }}"
          },
          "matchingColumns": [
            "presentation_id",
            "slide_number"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "presentation_id",
              "displayName": "presentation_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "slide_number",
              "displayName": "slide_number",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "feedback",
              "displayName": "feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "slide_good_enough",
              "displayName": "slide_good_enough",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        6040,
        240
      ],
      "id": "d14f9117-15b1-4aa5-a2d3-cb0dd196761b",
      "name": "Feedback speichern",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Neuen presentations Eintrag').item.json.presentation_id }}-Author"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        5680,
        60
      ],
      "id": "09244ca7-43b4-425b-942d-9300f5da6ead",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "DDkRORqJwocyh8WA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        740,
        -340
      ],
      "id": "7cd33c9f-c472-4257-beb8-7b904702d8b5",
      "name": "When chat message received",
      "webhookId": "8e324271-201b-4dfb-9d88-26f8a4f8ef8b"
    }
  ],
  "pinData": {},
  "connections": {
    "Google Drive": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Set Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Set Text": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluator": {
      "main": [
        [
          {
            "node": "Slide good enough",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Presentation Planner": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Presentation Planner",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Slide Author",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Evaluator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Answer questions with a vector store1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Neue presentations_slides Einträge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Neuen presentations Eintrag": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer questions with a vector store1": {
      "ai_tool": [
        [
          {
            "node": "Slide Author",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Evaluator",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Presentation Planner",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_embedding",
            "index": 0
          },
          {
            "node": "Postgres PGVector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Neue presentations_slides Einträge": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive2": {
      "main": [
        []
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Google Drive2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append output": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        []
      ]
    },
    "Slide good enough": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slide Author",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Answer questions with a vector store1",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Presentation Planner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store2": {
      "ai_tool": [
        []
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Google Drive5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daten abrufen": {
      "ai_tool": [
        [
          {
            "node": "Evaluator",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Presentation Slides": {
      "ai_tool": [
        [
          {
            "node": "Slide Author",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Evaluator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres2": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slide Author",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slide Author": {
      "main": [
        [
          {
            "node": "Evaluator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback speichern": {
      "ai_tool": [
        [
          {
            "node": "Evaluator",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Slide Author",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Neuen presentations Eintrag",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "87b831ce-48b4-496c-a094-69a4efe3717b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1f8d5d7e231653a0c2a277995041bc5f2012b7d39903df35d43795f2c649cf0f"
  },
  "id": "UfVzDCHdwD6I74h3",
  "tags": []
}